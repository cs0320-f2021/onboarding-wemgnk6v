package edu.brown.cs.student.main;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class StarNeighborCalculator {
  private List<Star> starList;
  private Double x;
  private Double y;
  private Double z;
  private int k;

  public List<StarDistance> getDistanceList() {
    return distanceList;
  }

  private List<StarDistance> distanceList;

  /**
   * Class that stores a star ID and the distance between the and the position from which to
   * find the nearest neighbors.
   */
  public class StarDistance implements Comparable<StarDistance> {
    private int starID;
    private Double distance;

    public StarDistance(int starIDInput, Double dist) {
      starID = starIDInput;
      distance = dist;
    }

    @Override
    public int compareTo(StarDistance sd) {
      return this.distance.compareTo(sd.distance);
      // randomly select if they are equidistant
    }
  }

  /**
   * StarNeighborCalculator Constructor.
   *
   * @param listInput a StarList from which to pull star neighbors.
   * @param kInput    the number of neighbors to find.
   * @param xInput    x coordinate of the position from which to find the nearest neighbors.
   * @param yInput    y coordinate the position from which to find the nearest neighbors.
   * @param zInput    z coordinate the position from which to find the nearest neighbors.
   */
  public StarNeighborCalculator(StarList listInput, int kInput, Double xInput, Double yInput,
                                Double zInput) {
    starList = listInput.getStarList();
    x = xInput;
    y = yInput;
    z = zInput;
    k = kInput;
    distanceList = new ArrayList<StarDistance>();
  }

  /**
   * Generates and sorts a list of the euclidean distance between each star and the position from
   * which to find the nearest neighbors.
   */
  private void buildDistanceList() {
    for (int i = 0; i < starList.size(); i++) {
      Star star = starList.get(i);
      distanceList.add(new StarDistance(star.getStarID(), star.calcDistance(x, y, z)));
      Collections.sort(distanceList);
    }
  }

  /**
   * Prints the k nearest neighbors in the list generated by buildDistanceList.
   */
  public void printKNN() {
    this.buildDistanceList();
    int numResults = Math.min(k, distanceList.size());
    for (int i = 0; i < numResults; i++) {
      System.out.println(distanceList.get(i).starID);
    }
  }

}
